version: 2.1

description: |
  Deploy to IPFS and update the domain name record in AWS

commands:
  deploy_and_update_dns:
    description: |
      Deploy the passed  in directory to IPFS, pin to Pinata, and update Route 53

    parameters:
      directory:
        description: The directory to deploy to IPFS
        type: string
        default: public

      pinata-api-key:
        description: The Pinata API key
        default: $PINATA_API_KEY
        type: string

      pinata-secret:
        description: The Pinata secret
        default: $PINATA_SECRET
        type: string

      dns-record:
        description: The DNS record to be updated
        default: ""
        type: string

      gateway:
        description: The gateway value for the DNS record
        default: "www.cloudflare-ipfs.com"
        type: string

      zone-id:
        description: The Route 53 zone ID
        default: ""
        type: string

    steps:
      - run:
          name: Add to IPFS
          command: |
            PIN_NAME="<< parameters.dns-record >> public $CIRCLE_BUILD_NUM"

            export IPFS_DEPLOY_PINATA__API_KEY="<< parameters.pinata-api-key >>"
            export IPFS_DEPLOY_PINATA__SECRET_API_KEY="<< parameters.pinata-secret >>"

            BUILD_DIRECTORY=$(readlink -f << parameters.directory >>)

            export HASH=$(npx ipfs-deploy -p pinata $BUILD_DIRECTORY)
            echo "export IPFS_HASH=$HASH" >> $BASH_ENV
      - run:
          name: Update DNS record
          command: |
            echo $IPFS_HASH
            if [[ ! -z "$IPFS_HASH" ]]
            then
              CHANGE_SET_CNAME="{  \"Changes\": [{ \"Action\": \"UPSERT\", \"ResourceRecordSet\": { \"Name\": \"<< parameters.dns-record >>.\", \"Type\": \"CNAME\", \"TTL\": 300, \"ResourceRecords\": [{ \"Value\": \"<< parameters.gateway >>\" }]}}]}"
              CHANGE_SET_DNSLINK="{  \"Changes\": [{ \"Action\": \"UPSERT\", \"ResourceRecordSet\": { \"Name\": \"_dnslink.<< parameters.dns-record >>.\", \"Type\": \"TXT\", \"TTL\": 60, \"ResourceRecords\": [{ \"Value\": \"\\\"dnslink=/ipfs/${IPFS_HASH}\\\"\" }]}}]}"
              aws route53 change-resource-record-sets --hosted-zone-id << parameters.zone-id >> --change-batch "$CHANGE_SET_DNSLINK"
              aws route53 change-resource-record-sets --hosted-zone-id << parameters.zone-id >> --change-batch "$CHANGE_SET_CNAME"
            else
              exit 1 # error on no hash
            fi
      - run:
          name: Request SSL certificate
          command: |
            # add jq for parsing the result
            sudo apt-get install jq
            # While loop until we get a certificate issued

            CERT_OUTPUT=$(curl 'https://cloudflare-ipfs.com/add_host' -H 'content-type: application/x-www-form-urlencoded' --data "hostname=<< parameters.dns-record >>" -sS | jq .err)

            while [ CERT_OUTPUT -ne "" ]
            do
              sleep 5s
              CERT_OUTPUT=$(curl 'https://cloudflare-ipfs.com/add_host' -H 'content-type: application/x-www-form-urlencoded' --data "hostname=<< parameters.dns-record >>" -sS | jq .err)
            done
